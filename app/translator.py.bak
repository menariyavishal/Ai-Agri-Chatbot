import logging
from googletrans import Translator
from typing import Tuple, Optional
import re

logger = logging.getLogger(__name__)

class LanguageProcessor:
    """Enhanced language detection and translation"""
    
    def __init__(self):
        self.translator = Translator()
        self.marathi_patterns = [
            # Devanagari script detection
            r'[\u0900-\u097F]',
            # Common Marathi words
            r'\b(आहे|आहेत|मी|तुम्ही|काय|कसे|कुठे|केव्हा|का|कोण)\b'
        ]
    
    def detect_language(self, text: str) -> str:
        """
        Enhanced language detection with fallback mechanisms
        Returns: 'mr' for Marathi, 'en' for English
        """
        if not text or not text.strip():
            return 'mr'  # Default to Marathi
        
        try:
            # First, check for Devanagari script (Marathi)
            if any(re.search(pattern, text) for pattern in self.marathi_patterns):
                logger.info("Detected Marathi based on script/patterns")
                return 'mr'
            
            # Use Google Translate for detection
            detected = self.translator.detect(text)
            detected_lang = detected.lang
            
            logger.info(f"Google Translate detected language: {detected_lang} (confidence: {detected.confidence})")
            
            # Map detected language to our supported languages
            if detected_lang in ['mr', 'hi']:  # Marathi or Hindi (close languages)
                return 'mr'
            elif detected_lang in ['en']:
                return 'en'
            else:
                # For other languages, default to English for processing
                logger.warning(f"Unsupported language detected: {detected_lang}, defaulting to English")
                return 'en'
                
        except Exception as e:
            logger.error(f"Language detection failed: {e}")
            # Fallback: if text contains English words, assume English, else Marathi
            english_words = ['what', 'how', 'when', 'where', 'why', 'who', 'crop', 'farm', 'weather']
            if any(word.lower() in text.lower() for word in english_words):
                return 'en'
            return 'mr'
    
    def translate_text(self, text: str, target_lang: str) -> str:
        """
        Translate text to target language with error handling
        """
        if not text or not text.strip():
            return text
        
        try:
            # Don't translate if already in target language
            current_lang = self.detect_language(text)
            if current_lang == target_lang:
                return text
            
            translated = self.translator.translate(text, dest=target_lang)
            result = translated.text
            
            logger.info(f"Translated '{text[:50]}...' from {current_lang} to {target_lang}")
            return result
            
        except Exception as e:
            logger.error(f"Translation failed for '{text[:50]}...': {e}")
            return text  # Return original text if translation fails
    
    def translate_to_english(self, text: str) -> str:
        """Translate text to English"""
        return self.translate_text(text, 'en')
    
    def translate_to_marathi(self, text: str) -> str:
        """Translate text to Marathi"""
        return self.translate_text(text, 'mr')
    
    def process_query(self, user_input: str) -> Tuple[str, str, str]:
        """
        Process user query and return:
        - processed_text (in English for AI processing)
        - detected_language
        - original_text
        """
        original_text = user_input.strip()
        detected_lang = self.detect_language(original_text)
        
        if detected_lang == 'mr':
            # Translate Marathi to English for processing
            processed_text = self.translate_to_english(original_text)
        else:
            # Keep English as is
            processed_text = original_text
        
        logger.info(f"Query processed - Original: '{original_text[:50]}...', "
                   f"Language: {detected_lang}, Processed: '{processed_text[:50]}...'")
        
        return processed_text, detected_lang, original_text
    
    def process_response(self, response_text: str, target_language: str) -> str:
        """
        Process AI response and translate if needed
        """
        if not response_text:
            return response_text
        
        if target_language == 'mr':
            # Translate English response to Marathi
            translated_response = self.translate_to_marathi(response_text)
            logger.info(f"Response translated to Marathi: '{translated_response[:50]}...'")
            return translated_response
        else:
            # Keep English response as is
            return response_text

# Global instance for easy import
language_processor = LanguageProcessor()

# Backward compatibility functions
def detect_language(text: str) -> str:
    """Backward compatibility function"""
    return language_processor.detect_language(text)

def translate_to_english(text: str) -> str:
    """Backward compatibility function"""
    return language_processor.translate_to_english(text)

def translate_to_marathi(text: str) -> str:
    """Backward compatibility function"""
    return language_processor.translate_to_marathi(text)